<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用typora来便捷使用markdown</title>
    <link href="/2020/12/16/TYpora/"/>
    <url>/2020/12/16/TYpora/</url>
    
    <content type="html"><![CDATA[<blockquote><p>转载：<a href="https://sspai.com/post/54912/">https://sspai.com/post/54912/</a></p></blockquote><h2 id="Typora-是什么？"><a href="#Typora-是什么？" class="headerlink" title="Typora 是什么？"></a>Typora 是什么？</h2><p>Typora 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是<strong>完全免费</strong>的。</p><p>在这篇文章中，我希望以「Typora 是什么」这个问题为线索，向大家全面介绍这款令人爱不释手的笔记应用。</p><h2 id="一个-Markdown-文本编辑器"><a href="#一个-Markdown-文本编辑器" class="headerlink" title="一个 Markdown 文本编辑器"></a>一个 Markdown 文本编辑器</h2><p>Typora 首先是一个 Markdown 文本编辑器，它支持且仅支持 Markdown 语法的文本编辑。在 <a href="https://typora.io/">Typora 官网</a> 上他们将 Typora 描述为 「A truly <strong>minimal</strong> markdown editor. 」。</p><p><img src="https://cdn.sspai.com/2019/05/24/49c4cdef47bf81018b9871a628523064.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">官网首页</p><h3 id="关于-Markdown"><a href="#关于-Markdown" class="headerlink" title="关于 Markdown"></a>关于 Markdown</h3><p>Markdown 是用来编写结构化文档的一种纯文本格式，它使我们在双手不离开键盘的情况下，可以对文本进行一定程度的格式排版。你可以在 <a href="https://sspai.com/post/36610">这篇文章</a> 中快速入门 Markdown。</p><p>由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。其中比较受到认可的是 <a href="https://github.github.com/gfm/">GFM 标准</a>，它是由著名代码托管网站 <a href="https://github.com/">GitHub</a> 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 <code>文件 - 偏好设置 - Markdown 语法偏好 - 严格模式</code> 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 <a href="http://support.typora.io/Strict-Mode/">这篇文档</a> 中查看。</p><h3 id="写得舒服"><a href="#写得舒服" class="headerlink" title="写得舒服"></a>写得舒服</h3><p>一个文本编辑器，<strong>写得舒服</strong>是关键。我曾说过，「更有趣的是，一个笔记应用不会因为它支持 Markdown 语法而高级或易用很多。」，细枝末节处的人性化考虑才是最重要的。而 Typora 的编辑体验显然是经过深思熟虑设计的产物。</p><p>我认为：一个优秀的笔记应用应该给用户<strong>选择 Markdown 语法风格的权利</strong>。而 Typora 在这一点上是我目前见过所有 Markdown 笔记应用中做得最好的。</p><p><img src="https://cdn.sspai.com/2019/05/24/ea30087c6f93d0fa3c5a313c8cdce357.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">文本编辑设置</p><p>通过打开 <code>文件 - 偏好设置</code> 你会发现 Typora 为编辑体验的考虑细致到了令人叹为观止的程度。Typora 中提供了大量有关 Markdown 偏好的设置，据此，你可以构建一个几乎完全适合自己的 Markdown 编辑器。下面我将依次介绍一些与文本编辑体验有关的功能亮点。</p><p>快捷键：<a href="https://www.dazhuanlan.com/2019/12/14/5df3b9db55a34/">https://www.dazhuanlan.com/2019/12/14/5df3b9db55a34/</a></p><h4 id="智能标点"><a href="#智能标点" class="headerlink" title="智能标点"></a>智能标点</h4><p>我认为「智能标点」是比较有趣的一点。它可以自动帮你将不是很美观的直引号 <code>&quot;</code> <code>&#39;</code> 转化为更美观的弯引号 <code>“</code> <code>‘</code> <code>’</code> <code>”</code>。具体内容你可以在官方的 <a href="http://support.typora.io/SmartyPants/">这篇文档</a> 中查看。关于直弯引号在 macOS 上如何输入你也可以看 <a href="https://sspai.com/post/38342">这篇文章</a>。</p><h4 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h4><p>Typora 的图片插入功能是广受好评的。要知道，Markdown 原生不太注重图片插入的功能，但你可以在 Typora 中：</p><ul><li>直接使用 <code>右键 - 复制 Ctrl + V</code> 将网络图片、剪贴板图片复制到文档中</li><li>拖动本地图片到文档中</li></ul><p>Typora 会自动帮你插入符合 Markdown 语法的图片语句，并给它加上标题。</p><p><img src="https://cdn.sspai.com/2019/05/24/1de13eae43785e27bbbcd631931fd161.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="hhh"></p><p>复制图片</p><p>你也完全可以使用图床来保证文档在分享后图片仍能正常显示。</p><p>更强大的是，Typora 支持在拖动或 <code>Ctrl + V</code> 网络图片后自动将其保存到本地。你可以在 <code>文件 - 偏好设置 - 编辑器 - 图片插入</code> 中选择复制到哪个路径，什么情况下需要复制。</p><p><img src="https://cdn.sspai.com/2019/05/24/717da653ad91e938c5f1f40555b9c057.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">图片插入</p><p>这一功能保证了即使网络图片源失效了，你还有本地的备份可用。同时也能使你的文档文件夹更合理、完整。</p><h4 id="打字机模式和专注模式"><a href="#打字机模式和专注模式" class="headerlink" title="打字机模式和专注模式"></a>打字机模式和专注模式</h4><p><strong>「打字机模式」</strong>使得你所编辑的那一行永远处于屏幕正中。</p><p><strong>「专注模式」</strong>使你正在编辑的那一行保留颜色，而其他行的字体呈灰色。</p><p>你可以在 <code>视图 - 专注模式 / 打字机模式</code> 中勾选使用这两个模式。</p><p><img src="https://cdn.sspai.com/2019/05/24/8b4e14ef732a23d4cc2a8fb1f8ec016c.gif" alt="img">两种模式</p><h4 id="实时预览"><a href="#实时预览" class="headerlink" title="实时预览"></a>实时预览</h4><p>我想很果断地下这个结论：到现在还不支持编辑界面实时预览的 Markdown 编辑器基本可以退出市场了。Typora 在这一方面显然已经领先了一大步——他们连 Markdown 语法的标记都在实时预览中消去了。当你离开正在编辑的有格式的文本段后，Typora 会自动隐藏 Markdown 标记，只留下<strong>「所见即所得」</strong>的美妙。<em>他们把这称为 Hybrid View。</em></p><p><img src="https://cdn.sspai.com/2019/05/24/f99c9ce02e2728ec6c64b443947fc67e.gif" alt="img">所见即所得</p><p>为了防止一些程序 bug 的发生（虽然在我使用下来感到是很少的）导致格式问题无法修改，Typora 保留了一个<strong>「源代码模式」</strong>。你可以通过 <code>视图 - 源代码模式</code> 或左下角的 <code>&lt;/&gt;</code> 按钮进入。</p><p><img src="https://cdn.sspai.com/2019/05/24/bcda9c4e35725b7297a6b90d8745564e.gif" alt="img">源代码模式</p><h4 id="大纲-文件侧边栏"><a href="#大纲-文件侧边栏" class="headerlink" title="大纲 / 文件侧边栏"></a>大纲 / 文件侧边栏</h4><p><img src="https://cdn.sspai.com/2019/05/24/f2461efb5ac297facfcd9f72cc5da6be.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">侧边栏</p><p>Typora 会根据你 Markdown 标记的 H1、H2、H3…… 各级标题为你呈现一个大纲。</p><p>你也可以选择查看文件夹中的文件，但由于目前 Typora 只支持查看 md 文件，因此我认为文件侧边栏这个功能还是很鸡肋的。</p><h4 id="空格与换行"><a href="#空格与换行" class="headerlink" title="空格与换行"></a>空格与换行</h4><p>Typora 在空格与换行部分主要是使用 <a href="http://www.commonmark.cn/w/">CommonMark</a> 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。</p><ul><li><strong>空格：</strong>在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>你可以在源代码模式下，为每个空格前加一个 <code>\</code> 转义符，或者直接使用 HTML 风格的 <code>&amp;nbps;</code> 来保持连续的空格。</li><li><strong>软换行：</strong>需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在 Typora 中，你可以通过 <code>Shift + Enter</code> 完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。</li><li><strong>硬换行：</strong>你可以通过 <code>空格 + 空格 + Shift + Enter</code> 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li><li><strong>换段：</strong>你可以通过 <code>Enter</code> 完成一次换段。Typora 会自动帮你完成两次 <code>Shift + Enter</code> 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</li><li><strong>Windows 风格（CR+LF）与 Unix 风格（CR）的换行符：</strong>CR 表示回车 <code>\r</code> ，即回到一行的开头，而 LF 表示换行 <code>\n</code> ，即另起一行。<br>所以 Windows 风格的换行符本质是「回车 + 换行」，而 Unix 风格的换行符是「换行」。这也是为什么 Unix / Mac 系统下的文件，如果在 Windows 系统直接打开会全部在同一行内。 你可以在 <code>文件 - 偏好设置 - 编辑器 - 默认换行符</code> 中对此进行切换。</li></ul><p>下附以上各空格、换行、换段的测试结果图。具体内容你可以在官网的 <a href="http://support.typora.io/Line-Break/">这篇文档</a> 中查阅。</p><p><img src="https://cdn.sspai.com/2019/05/24/5c2fbaa53b27666a7fd0b07ac3e100bf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">空格、换行、换段</p><h4 id="emoji-表情"><a href="#emoji-表情" class="headerlink" title="emoji 表情"></a>emoji 表情</h4><p>如今 emoji 表情越来越多地出现在一些网站文章中，但在桌面端（特别是 Windows 系统）文本编辑器上插入 emoji 是一件十分麻烦的事情。在使用 Typora 之前，我打出 emoji 表情的办法基本有两个：</p><ol><li><strong>输入法联想：</strong>优点是比较方便，但会插入一张图片而不是一个字符，在许多情景下都不是很合适。 </li><li><strong>复制 emoji 符号：</strong>优点是能保证符号的形式，但显然每次用都需要去复制，比较麻烦。</li></ol><p><img src="https://cdn.sspai.com/2019/05/24/b2601a694aba07b8a68615ca59bcc495.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">输入法联想</p><p>在 Typora 中，你可以用 <code>:emoji:</code> 的形式来打出 emoji，软件会自动给出图形的提示，还是比较好用的。</p><p><img src="https://cdn.sspai.com/2019/05/24/ff26eeb5ff2d6fae16cab163ebfcd096.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">Typora 中输入 emoji</p><h2 id="一个学术文档编辑器"><a href="#一个学术文档编辑器" class="headerlink" title="一个学术文档编辑器"></a>一个学术文档编辑器</h2><p>除了基本的文本编辑体验极佳之外，Typora 还是一个非常优秀的学术文档编辑器。当然作为一个轻量级的、基于 Markdown 的编辑器，它不能与那些 LaTeX 编辑器相提并论，但它仍支持了许多可用于学术写作的功能。</p><h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><blockquote><p>LaTeX 是一种基于 TeX 的排版系统，由于它易于快速生成复杂表格和数学公式，非常适用于生成高印刷质量的科技和数学类文档。如果你常阅读数学、计算机等领域的学术论文，你一定对 LaTeX 不陌生。</p></blockquote><p>Typora 原生支持 LaTeX 语法，你有两种方式输入 LaTeX 风格的数学公式：</p><ol><li><strong>行内公式（inline）：</strong>用 <code>$...$</code> 括起公式，公式会出现在行内。</li><li><strong>块间公式（display）：</strong>用 <code>$$...$$</code> 括起公式（注意 <code>$$</code> 后需要换行），公式会默认显示在行中间。</li></ol><p>具体的 LaTeX 语法在此不赘述了，你可以在 <a href="https://blog.csdn.net/happyday_d/article/details/83715440">这篇文章</a> 中查看。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>Typora 中代码的插入也可以分为行内和块间两种：</p><ol><li>行内代码：用 <code>...</code> 或 <code>...</code> 括起代码，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</li><li>代码块：输入 ``` 后并输入语言名，换行，开始写代码，Typora 就会自动帮你实现代码高亮。Typora 原生支持许多编程语言代码块的语法高亮，基本日常常用的编程语言它都能很好地支持。<br>除此以外，你也可以直接换行开始写，而后再选择语言。</li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>在 Markdown 中插入表格一直是一件比较头疼的事情。在一般的 Markdown 编辑器中，你可以通过以下的格式插入表格：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 右对齐 </span>|<span class="hljs-string"> 居中对齐 </span>|<br>|<span class="hljs-string"> :-----</span>|<span class="hljs-string"> ----: </span>|<span class="hljs-string"> :----: </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><p>乍一看还挺直观好用的是吧？但想想，一旦表格内容层次不齐，又或是表格长得难以下手，直接用键盘输入表格就显得十分麻烦和痛苦了。</p><p>好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 <code>鼠标右键 - 插入 - 表格</code> ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。</p><p><img src="https://cdn.sspai.com/2019/05/24/51bf2f290592e1ddbadb95765c04f297.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">Typora 表格</p><h3 id="链接引用与脚注"><a href="#链接引用与脚注" class="headerlink" title="链接引用与脚注"></a>链接引用与脚注</h3><p><strong>链接引用</strong>类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 <code>[]:</code> 的语法来为你的文档加上链接引用。</p><p><strong>脚注</strong>在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 <code>[^ number ]</code> ，再在下方通过 <code>[^ number ]:</code> 在文档中插入脚注。注意不要遗漏了脚注编号 <code>number</code> 前后的空格。</p><p><img src="https://cdn.sspai.com/2019/05/24/5f82606e6d89fe1eb24705c4ca6b895d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">链接引用和脚注</p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>除了前文提到的文件侧边栏，Typora 还提供了一些耦合度不高的文件系统。</p><ul><li><strong>快速打开：</strong>你可以通过 <code>文件 - 快速打开...</code> 或 <code>Ctrl + P</code> 快捷键快速打开最近的文档。</li><li><strong>保存：</strong>Typora 支持自动保存，一般很少有写好的文档丢失的情况。同时它也提供了诸如「保存」、「另存为」、「保存全部打开的文件…」之类的功能。</li><li><strong>导入：</strong>Typora 支持非常多的文件格式：.docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub。</li><li><strong>导出：</strong>Typora 原生支持导出 PDF，HTML等格式。你可以根据软件内提示安装 <strong>Pandoc 插件</strong>来导出更多例如 docx，LaTeX 等格式。 </li></ul><p><img src="https://cdn.sspai.com/2019/05/24/ba295f21f0b71646bb36a0517e868ced.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">导出</p><h2 id="一个伪装成文本编辑器的浏览器"><a href="#一个伪装成文本编辑器的浏览器" class="headerlink" title="一个伪装成文本编辑器的浏览器"></a>一个伪装成文本编辑器的浏览器</h2><p>当我的一个朋友问我「Typora 有什么好写的？」时，我回答「Typora 是一个伪装成文本编辑器的浏览器」。是的，事实上如果你有一定的计算机基础，你可以找到许多有关于「Typora 其实是一个浏览器」的蛛丝马迹。</p><p><img src="https://cdn.sspai.com/2019/05/24/13837bcdcded9ae406e8c4aac5f2d752.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">图片插入</p><p>在图片插入的选项中，Typora 用了「复制图片到 ./${filename}.assets 文件夹」的说法，而这其实是网页前端常用的 Javascript 字符串模板语法的风格。</p><p>再比如，Typora 将更遵循 GFM 标准的 Markdown 语法模式称为「严格模式 Strict Mode」，这一说法常见于 HTML 和 JavaScript 编程中。类似「源代码模式」的说法也是同理。</p><p>当然，最明显的一点是当你按下 <code>Shift + F12</code> 快捷键时，页面会弹出一个基于 Chrome 的开发者工具栏，也就是我们在浏览器中常说的「审查元素」。</p><p><img src="https://cdn.sspai.com/2019/05/24/da8c9b305a222cb5fadb41c12da81a12.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">审查元素</p><h3 id="伪装从何而来？"><a href="#伪装从何而来？" class="headerlink" title="伪装从何而来？"></a>伪装从何而来？</h3><p>当我们把视角放在「Typora 是一个支持 Markdown 语言的文本编辑器」的出发点来考虑这个问题，一切就都显得很明白了。</p><p>John Gruber 在 2004 年用 Perl 创造了 Markdown 语言，这个语言的目的是希望大家使用「易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML（或是 HTML）」。也就是说，<strong>在 Markdown 诞生之初，它就是为了被浏览器阅读而设计的。</strong></p><p>我们在用 Markdown 语言撰写文稿的时候，其实本质上是在借助某种编程语言的转化（解析器）来编写一个 HTML 网页。Markdown 从它诞生之初就与 Web 技术有着及其紧密的联系。</p><p>如果我说，我们每一篇文稿都是一个网页，那就很好理解了。Typora 利用解析器先将我们写的 Markdown 文档解析成为 HTML 文档，再为它嵌入一个 CSS 样式，最后再加上可能需要的脚本等。</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>HTML 是一种标记语言，主要负责构成网页的骨架，它包含所有不加装饰的网页元素。在 Typora 的使用场景下则是所有的<strong>文本、段落、标题等</strong>的记号。</p><p>你可以把一张网页想象成一幅数字油画，HTML 就是那个黑白线条的底，上面写满了数字标记，示意你哪一块区域要涂什么颜色。而 CSS 则负责在对应的区域涂上颜色，甚至加上一些装饰等。</p><p><img src="https://cdn.sspai.com/2019/05/24/7ce3d9ed245eed902e833405b9464103.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">数字油画</p><h4 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h4><p>Typora 支持许多常用的 HTML 标签，如果你了解 HTML 语法的话，你可以写出十分美观丰富的文档页面。</p><p><img src="https://cdn.sspai.com/2019/05/24/89bba4dfdfb49b8d3c129ce1157a54b1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">HTML 标签</p><p>事实上你可以在 Typora 中完成许多基本的 HTML 风格的文本输入，例如 HTML 字符、HTML 块、HTML 风格的注释，甚至是视频和音频。具体支持的功能和限制请在 <a href="http://support.typora.io/HTML/">官方文档</a> 中查阅。</p><p>有了这一功能，我们就可以在 Typora 中创造出远超普通 Markdown 文档的页面效果。</p><h4 id="导出为-HTML"><a href="#导出为-HTML" class="headerlink" title="导出为 HTML"></a>导出为 HTML</h4><p>Typora 原生支持将文档导出为 HTML 格式的文件，并选择是否要嵌入 style（也就是后文我将提到的 CSS 的部分）。</p><p>除此之外，由于其本身「浏览器」的属性，你可以直接在实时预览界面用 <code>Ctrl +C</code> 复制到 HTML 代码。一个实用的用处是将这些 HTML 代码直接 <code>Ctrl + V</code> 黏贴到微信公众号后台，基本可以保证两边显示效果相同。这一点不仅使公众号推送可以有更自由、美观的样式，也让编辑、排版更轻松了。（由于微信自带浏览器的一些特性，可能有少部分 CSS style 不能生效，建议多多校对。）</p><p><img src="https://cdn.sspai.com/2019/05/24/3d818c18934632b043fcf4ad9be1d046.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">公众号</p><p>具体如何用 Typora 完成公众号写作，你可以在 <a href="https://sspai.com/post/40524">这篇文章</a> 中进一步了解。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>为了让文档更美观，我们可以为其加上 CSS style。我认为 Typora 对 CSS 的支持让它成为一众桌面笔记应用中最与众不同的一个。在 Typora 中 CSS 被称为「主题」，但其本质仍是 CSS 文件。你可以在 <code>文件 - 偏好设置 - 主题 - 打开主题文件夹</code> 看到这些 CSS 文件。</p><p><img src="https://cdn.sspai.com/2019/05/24/7d3cfbc92721733e16ed63d72a48a572.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">主题</p><p><img src="https://cdn.sspai.com/2019/05/24/98a04c4f9129e0f018d15bc790b376c2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">主题文件夹</p><p>选择不同的主题可以使文档拥有不同的外观，但不会影响内容。Typora 自带了若干主题，你也可以在 <a href="http://theme.typora.io/">官网</a> 下载更多的主题。</p><p><img src="https://cdn.sspai.com/2019/05/24/efcf65ba993c4bb0b058d6eb8258df6f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">主题商店</p><p>除此以外，如果你有一定的 Web 编程基础，你当然也可以自己修改、新建适合你使用需求的 CSS 文件。我自己就写了一份名为 WeChat 的 CSS 文件，来符合我公众号特定的排版需求，例如正文是 15px，页边距是 8，小标题是 18px 等等。</p><p><img src="https://cdn.sspai.com/2019/05/24/317ac1df25fcfc817c03f92d6086764e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">CSS 文件</p><p>使用 Typora 的「主题」功能写公众号的一个好处是，只需要每次都套用同样的主题，我们就可以在保证每次排版规范都相同的同时，节省许多重复的工作。</p><h3 id="YAML-front-matter"><a href="#YAML-front-matter" class="headerlink" title="YAML front-matter"></a>YAML front-matter</h3><p>Typora 支持在文档头部加上基于 YAML 的 front-matter 信息，这一特性适用于把 Markdown 文档分类归档上传到用 Hexo 框架搭建的博客中。我对于这一点不太了解，这里就不误导大家了。有所了解的朋友可以在评论区谈谈！</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如果你看过 Typora 的 <a href="https://typora.io/dev_release.html">更新日志</a> 你会发现它早在 2015 年 12 月 19 日就发布了 0.7.0 (alpha) 版本，但到目前为止它仍处于 beta 阶段。<em>截止到笔者写作这篇文章的初稿时，Typora 的版本号为 0.9.9.24.6 (beta)。</em></p><p>我想，能够潜心三年多打磨、测试一个产品，开发者们一定是倾注了极大的心血到这款笔记应用中。而在使用中，我也能体会到开发者的良苦用心。他们不想做知识的储备中心，不想做快速的草稿、笔记应用，也不想做任何和生产力无关的功能和特性。对于 Typora 的设计和构想，只有唯一的宗旨——<strong>「生产效率」</strong>。</p><p>因为移动端生产效率低，所以只有桌面端应用。因为左顾右盼的两栏式预览影响思路，所以他们甚至去掉了 Markdown 语法标记，只留下最终呈现的样式。因为 Markdown 是为了 HTML 呈现而设计的，所以他们提供了从入门到高级的一系列 Web 辅助功能…… 这一切都只是为了纯粹的<strong>生产效率</strong>。如果我们回头想想，Markdown 语言本身，当初不也是为了高效地生成简单网页而诞生的吗？</p><p>最后，让我们一起期待这款<strong>顶级桌面文本生产力工具</strong>的正式版的到来吧！😆</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter - Hexo</a></li><li><a href="https://sspai.com/post/30292">让 Markdown 写作更简单，免费极简编辑器：Typora</a></li><li><a href="https://sspai.com/post/40524">使用 Typora 一次性搞定公众号写作与排版</a></li><li><a href="https://sspai.com/post/36420">简中求效：Markdown 遇上 LaTeX</a></li><li><a href="https://blog.csdn.net/jiajikang_jjk/article/details/80380133">关于Typora + pandoc导出文件功能的介绍</a></li><li><a href="https://blog.csdn.net/shujuelin/article/details/79340373">我的 LaTeX 入门</a></li><li><a href="https://www.cnblogs.com/lfk-dsk/p/5205969.html">选择正确的 Markdown Parser</a></li><li><a href="https://sspai.com/post/43301">Typora —— 能用 ⌘C⌘V 插图的 Markdown 编辑器</a></li><li><a href="http://support.typora.io/HTML/">HTML Support in Typora - Typora</a></li><li><a href="https://zh.wikipedia.org/wiki/Markdown">Markdown - Wikipedia</a></li><li><a href="https://blog.csdn.net/tskyfree/article/details/8121951">Windows、Unix、Mac不同操作系统的换行问题-剖析回车符\r和换行符\n</a></li><li><a href="https://sspai.com/post/36420">简中求效：Markdown 遇上 LaTeX</a></li><li><a href="http://www.commonmark.cn/w/">通用标注 (CommonMark)</a></li><li><a href="http://support.typora.io/Line-Break/">Whitespace and Line Breaks - Typora</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
      <category>博客写作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统概述</title>
    <link href="/2020/12/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <url>/2020/12/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><h4 id="控制程序"><a href="#控制程序" class="headerlink" title="控制程序"></a>控制程序</h4><ul><li><p>对上控制管理应用程序</p></li><li><p>为应用程序提供服务</p><blockquote><p>io，声卡等等，帮助应用程序工作。</p></blockquote></li><li><p>杀死应用程序</p></li></ul></li><li><h4 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h4><ul><li>管理外设</li><li>分配资源</li><li>抽象硬件</li></ul></li></ul><h3 id="层次架构"><a href="#层次架构" class="headerlink" title="层次架构"></a>层次架构</h3><p>操作系统是一个系统软件，在应用软件之下，硬件之下</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li><p>shell</p><p>展示给用户的界面等，是对外提供的可见服务</p></li><li><p><strong>kernel</strong></p><p>操作系统内部功能的实现，是我们学习操作系统的关注点</p></li></ul><h3 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h3><h4 id="kernel操作系统内部组件"><a href="#kernel操作系统内部组件" class="headerlink" title="kernel操作系统内部组件"></a>kernel操作系统内部组件</h4><ul><li><strong>cpu</strong>调度器</li><li>物理<strong>内存</strong>管理</li><li>虚拟<strong>内存</strong>管理</li><li><strong>文件</strong>系统管理</li><li>中断处理和设备驱动 </li></ul><h4 id="kernel特征"><a href="#kernel特征" class="headerlink" title="kernel特征"></a>kernel特征</h4><ul><li><p><strong>并发</strong></p><ul><li><p>一段时间同时存在多个运行程序</p><p>注：并行是一个时间点，要求有多个cpu</p></li></ul></li><li><p><strong>共享</strong></p><ul><li>“同时”共享</li><li>互斥共享</li></ul></li><li><p><strong>虚拟</strong></p><p>分时操作让用户觉得有一个计算机专门给他服务</p></li><li><p><strong>异步</strong></p></li></ul><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h3 id="操作系统的结构"><a href="#操作系统的结构" class="headerlink" title="操作系统的结构"></a>操作系统的结构</h3><ul><li>简单的操作系统：</li></ul><p>MS-DOS 不分模块的单体内核 (内部通过函数调用访问,<strong>缺点</strong>:复杂，紧耦合，易受攻击)</p><ul><li>微内核</li></ul><p>尽可能把内核功能移植到用户空间，<strong>缺点</strong>性能低。</p><ul><li><p>外核，内核分为一块，一块负责和硬件打交道，另一部分和应用打交道。</p></li><li><p>虚拟机,</p></li></ul><p>VMs(虚拟机)-&gt;VMM(虚拟机监视器)-&gt;物理机硬件，多操作系统共享硬件资源。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><ul><li><p>操作系统很大很复杂，windows操作系统代码有4500w行。</p></li><li><p>操作系统在工程中有很大的应用，有时候需要专门设计。</p></li><li><p>操作系统是一门重要的专业课程，能够帮助我们更好的理解<strong>硬件</strong>和<strong>上层</strong>之间的关系，对其有一定的认识能够帮助我们更好在计算机的其他领域进行研究。</p></li></ul><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ol><li>操作系统第一章概述 <a href="https://blog.csdn.net/iwanderu/article/details/103934127">https://blog.csdn.net/iwanderu/article/details/103934127</a></li><li>操作系统清华课程 <a href="https://www.bilibili.com/video/BV1js411b7vg?p=9">https://www.bilibili.com/video/BV1js411b7vg?p=9</a></li><li>操作系统课程讲义等资料<a href="http://os.cs.tsinghua.edu.cn/oscourse/OS2018spring/">http://os.cs.tsinghua.edu.cn/oscourse/OS2018spring/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
      <category>概述</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速转载</title>
    <link href="/2020/12/15/%E8%BD%AC%E8%BD%BD/"/>
    <url>/2020/12/15/%E8%BD%AC%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix">        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css">                <div id="content_views" class="markdown_views prism-tomorrow-night-eighties">                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>                    </svg>                    <div id="article_content" class="article_content clearfix csdn-tracking-statistics">  <div id="content_views" class="markdown_views prism-atom-one-dark">   <svg xmlns="http://www.w3.org/2000/svg">   <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block"></path>  </svg>   <div id="article_content" class="article_content csdn-tracking-statistics tracking-click">    <div class="markdown_views">     <h2 id="前言"><a name="t0"></a><a name="t0"></a><a target="_blank"></a><a target="_blank"></a>前言</h2>     <p>  对于喜欢逛CSDN的人来说，看别人的博客确实能够对自己有不小的提高，有时候看到特别好的博客想转载下载，但是不能一个字一个字的敲了，这时候我们就想快速转载别人的博客，把别人的博客移到自己的空间里面，当然有人会说我们可以收藏博客啊，就不需要转载，(⊙o⊙)… 也对。。</p>    </div>  </div> </div></div><h2 id="实现"><a name="t1"></a><a name="t1"></a><a target="_blank"></a><a target="_blank"></a>实现</h2> <p>  因为我自己当初想转载的时候却不知道该怎么转载，所以学会了之后就把方法写出来，帮助那些想转载却不知道该怎么转载的人（大神勿笑）。 <br>   我们首先打开要转载的博客，然后鼠标右键就会出现下面的菜单： <br> </p><center> <img src="https://img-blog.csdn.net/20150912104500089" alt="这里写图片描述" title=""></center> <br>   我们点击【审查元素】，就会出现当前HTML页面的代码，如下：<p></p> <p></p><center> <img src="https://img-blog.csdn.net/20150912104633872" width="548" height="353"> </center> <br>   我们选中“article_content”从图片左边我们也可以看到，博客的内容已经被我们选中了，也就是我们想要转载的内容，然后右键，就会出现下面的菜单：<p></p> <p></p><center> <img src="https://img-blog.csdn.net/20150912104903592" alt="这里写图片描述" title=""></center> <br>   我们选中【Copy as HTML】就可以把其中要转载的内容复制下来，接下来的就是粘贴了。 <br>   我们先新建一篇文章，打开markdown编辑器（因为在普通的编辑器我没有找到方法/(ㄒoㄒ)/~~），然后粘贴一下，就会出现下面的内容：<p></p> <p></p><center> <img src="https://img-blog.csdn.net/20150912105209122" width="762" height="388"></center> <br>   可以在右边看到，博客内容已经被转载了，然后发表就可以了。<p></p> <p>  <font color="red">最后特别要注意的是，我们发表的时候一定要选择【转载】，尊重原创！！</font></p> <p>转载来源 <a href="http://blog.csdn.net/bolu1234/article/details/51867099" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/bolu1234/article/details/51867099</a></p>                </div><div><div></div></div>                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css" rel="stylesheet">                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-ba784fbaf8.css" rel="stylesheet">        </div><p>转载了别人的转载怎么办呢。。。那就再加一个吧</p><p>转载来源：<a href="https://blog.csdn.net/bolu1234/article/details/51867099">https://blog.csdn.net/bolu1234/article/details/51867099</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
      <category>博客写作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为hexo搭建方便写作的功能</title>
    <link href="/2020/12/15/%E4%B8%BAhexo%E6%90%AD%E5%BB%BA%E6%96%B9%E4%BE%BF%E5%86%99%E4%BD%9C%E7%9A%84%E5%8A%9F%E8%83%BD-1/"/>
    <url>/2020/12/15/%E4%B8%BAhexo%E6%90%AD%E5%BB%BA%E6%96%B9%E4%BE%BF%E5%86%99%E4%BD%9C%E7%9A%84%E5%8A%9F%E8%83%BD-1/</url>
    
    <content type="html"><![CDATA[<h3 id="hexo-admin管理blog文件"><a href="#hexo-admin管理blog文件" class="headerlink" title="hexo-admin管理blog文件"></a>hexo-admin管理blog文件</h3><p>使用了hexo-admin来管理和写作，能够有更加好的体验，再也不用直接码.md文件了，并且在hexo可以实现实时的渲染，方便我这样只是为了使用的小白能好好的看我写的和想的有没有不同~</p><p>&lt;—&gt;</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>首先是安装，在blog文件所在页git bush，输入<br><code>npm install --save hexo-admin </code><br>进行安装</p><h5 id="打开使用"><a href="#打开使用" class="headerlink" title="打开使用"></a>打开使用</h5><p>输入<br><code>hexo sever -d</code><br>建立本地admin编辑网站</p><p>然后打开自己本地网页地址：<a href="http://localhost:4000/admin/">http://localhost:4000/admin/</a> 进行编辑，编辑完之后<code>ctrl c</code>，你在admin页面上的编辑会写入到你的本地文件中，停止后再清理生成发布即可。</p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul><li>hexo-admin官方文档：<a href="https://github.com/jaredly/hexo-admin">https://github.com/jaredly/hexo-admin</a></li><li>使用 hexo-admin 後台管理工具：<a href="https://ed521.github.io/2019/08/hexo-admin/">https://ed521.github.io/2019/08/hexo-admin/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
      <category>博客写作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>hexo-admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客功能完善</title>
    <link href="/2020/12/14/day1/"/>
    <url>/2020/12/14/day1/</url>
    
    <content type="html"><![CDATA[<p>今天我在昨天搭建的雏形下，主要完成以下任务：</p><p>设计了自己的版面风格，更换背景配图及颜色<br>RGB颜色对照标： <a href="https://tool.oschina.net/commons?type=3">https://tool.oschina.net/commons?type=3</a><br>图片资源：<br>壁纸<br><a href="https://wallpaperhub.app/">https://wallpaperhub.app/</a><br><a href="https://wallhaven.cc/w/2em38y">https://wallhaven.cc/w/2em38y</a><br><a href="https://unsplash.com/">https://unsplash.com/</a><br>logo：</p><p>学习实现了分类和标签功能<br>用hexo new page tags 指令后，在source下的md文件中添加layout: tags<br>其他类似<br>功能实现要在先文章先的front-matter中使用相应指令</p><p>添加了评论功能<br>参考：hexo-fluid添加utterances评论功能  <a href="https://liaoyq.club/2020/04/03/hexo-fluid%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/">https://liaoyq.club/2020/04/03/hexo-fluid%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</a></p><p>参考<br>搭建主线：<a href="https://ryanluoxu.github.io/2017/11/24/%E7%94%A8-Hexo-%E5%92%8C-GitHub-Pages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">https://ryanluoxu.github.io/2017/11/24/%E7%94%A8-Hexo-%E5%92%8C-GitHub-Pages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</a><br>主题fluid配置：<a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a><br>hexo操作：<a href="https://hexo.io/zh-cn/docs/writing">https://hexo.io/zh-cn/docs/writing</a><br>hexo-fluid添加utterances评论功能 <a href="https://liaoyq.club/2020/04/03/hexo-fluid%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/">https://liaoyq.club/2020/04/03/hexo-fluid%E6%B7%BB%E5%8A%A0utterances%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的个人BLOG诞生了</title>
    <link href="/2020/12/13/hello-world/"/>
    <url>/2020/12/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>身为小白的我第一次使用github上的包，在憋了一天后有了初步的BLOG雏形，但是值得做的事情都是能让你愿意一步一步来的。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
